# in this chapter we 

#1 model Manger #2 changemodel name #3 custom model Manger name .

------------------------------------------------------------------------
a manager is the interface through whichc database query operation are provide to django models . at least one manager exists for every model in a django application . 

-----------------

model manager is used to interact with databse .

---

by default django adds a manager with the name objects to every django models class .

where is model manger --------

django.db.models.manager.Manager 



----------cahnge Manger Name ---------------------

By default Django adds a manager with the name objects to every Django Model Class however if you wanted to use object as a field name or if you want to use a name other than objects from the manager you can rename it on a per-model basis .

To rename the manager for a given class define a class attribute of type models.manager() on that model .

example : - 

fromdjango.db import models

class Student(models.Model):
    name = fields 
    roll - fids 
    students = models.Manager() This will change objets= students 

    ---------------how to query it ----------------------


student_data = Student.students.all()










--------------------custom models  Manger -----------------------------------------

why we need : - 

  You can use a custom manager in a particular model by extending the base manager class and initializing your custom manager in your model.

  A custom manager method can return anything you want it does not have to return a QuerySet 

  - to modify the initial query set the manager returns. 

  - To add extra manager methods

-----------------------------modify the initial QuerySet -------------------------------

Farm manager based queries at return all objects in the system you can override a manager based query set by overriding the manager dot get _queryset() method.get_queryset() should return a QuerySet with the properties you 
require . 

write model manager : --

class CustomManager(models.Manager):
    def get_queryset(self):  # Overriding built in method called when we call all() .
       return super().get_queryset().order_by('name')


Associated Manger with model: --

class Student (models.Model):

# we want to work both objects or students 


   object = model.Manager()  # default manager 
   students = CustomManager()  # costom Manager 

views.py = 

 student = Student.objects.all()
 student = Student.student.all()

--------practical 





another thing whic we look is --------------------add extra manager methods 

Adding extra manager methods is the preferred way to add table - level functionality to your model.------------

write model Manager 

class CustomManager(models.manger):
     def get_stu_roll_range(self , r1 , r2):
         return super().get_queryset.filter(roll__range(r1, r2))


in views.py 

we use 

student = Student.students.get_stu_roll_range(01 , 103 )


we can do with this things with proxy nodel : 





   








